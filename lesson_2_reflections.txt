What happens when you initialize a repository? Why do you need to do it?

    When you initialize a git repository git creates a .git directory which saves all of the attached metadata for your project. It does not do the first commit for you, it just creates the infrastructure necessary. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a go between for you to make your commit. it is where you load up all the files you want to commit. It offers value by allowing you to retroactively divide your commit into smaller, more logical pieces.

How can you use the staging area to make sure you have one commit per logical change?

	You can use the staging area to review the difference between your working directory and what you have added to the staging area. 
	This allows you to review anythign you are about to commit and make the necessary changes.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are useful for keeping your history organized because they allow you to split off if you are doing something you arent sure will work. Or you want to create a new version.

How do the diagrams help you visualize the branch structure?

	Diagrams help to visualize the branch structure because they show which commit each new branch or head was built off of.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together combines the code into a functions piece fo software. We represent it in the diagram that way so we know that some parts of the code came from one branch while other came from another branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
